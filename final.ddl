-- Generated by Oracle SQL Developer Data Modeler 4.2.0.917
--   at:        2016-12-18 21:59:11 MSK
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



CREATE TABLE группы (
    id_группы     INTEGER NOT NULL,
    no_группы     CHAR(6 CHAR),
    no_семестра   INTEGER,
    годформ       DATE
);

ALTER TABLE группы ADD CONSTRAINT группы_pk PRIMARY KEY ( id_группы );

CREATE TABLE деньнедели (
    id           INTEGER NOT NULL,
    деньнедели   CHAR(15 CHAR)


);

ALTER TABLE деньнедели ADD CONSTRAINT деньнедели_pk PRIMARY KEY ( id );

CREATE TABLE дисциплины (
    id_дисцпл      INTEGER NOT NULL,
    наименование   CHAR(15),
    кафдисципл     CHAR(1),
    семдисципл     INTEGER,
    колвочасов     INTEGER
);

ALTER TABLE дисциплины ADD CONSTRAINT предмет_pk PRIMARY KEY ( id_дисцпл );

CREATE TABLE замдекана (
    id_замдекана   INTEGER NOT NULL,
    физлицо        INTEGER NOT NULL,
    курс           INTEGER
);

ALTER TABLE замдекана ADD CONSTRAINT замдекана_pk PRIMARY KEY ( id_замдекана );

CREATE TABLE кпм (
    id            INTEGER NOT NULL,
    тип           INTEGER NOT NULL,
    максоценка    INTEGER,
    миноценка     INTEGER,
    учплан        INTEGER NOT NULL,
    неделясдачи   INTEGER
);

ALTER TABLE кпм ADD CONSTRAINT кпм_pk PRIMARY KEY ( id );

CREATE TABLE куратор (
    id_куратора   INTEGER NOT NULL,
    группа        INTEGER NOT NULL,
    физлицо       INTEGER NOT NULL
);

ALTER TABLE куратор ADD CONSTRAINT куратор_pk PRIMARY KEY ( id_куратора );

CREATE TABLE нир (
    id_работы      INTEGER NOT NULL,
    тема           CHAR(80 CHAR),
    исполнитель    INTEGER NOT NULL,
    руководитель   INTEGER NOT NULL,
    датаначала     DATE,
    датаконца      DATE,
    процентвып     INTEGER,
    кпм            INTEGER NOT NULL
);

ALTER TABLE нир ADD CONSTRAINT нир_pk PRIMARY KEY ( id_работы );

CREATE TABLE общдеятельность (
    id          INTEGER NOT NULL,
    группа      INTEGER NOT NULL,
    студент     INTEGER NOT NULL,
    должность   INTEGER NOT NULL
);

ALTER TABLE общдеятельность ADD CONSTRAINT общдеят_pk PRIMARY KEY ( id );

CREATE TABLE общдолжности (
    id         INTEGER NOT NULL,
    название   CHAR(15 CHAR)
);

ALTER TABLE общдолжности ADD CONSTRAINT общдолжности_pk PRIMARY KEY ( id );

CREATE TABLE оценки (
    "id Оценки"     INTEGER NOT NULL,
    оценка          INTEGER,
    студент         INTEGER NOT NULL,
    преподаватель   INTEGER NOT NULL,
    датасдачи       DATE,
    кпм             INTEGER NOT NULL
);

ALTER TABLE оценки ADD CONSTRAINT оценка_pk PRIMARY KEY ( "id Оценки" );

CREATE TABLE пользователи (
    id_user         INTEGER NOT NULL,
    "id _ФизЛица"   INTEGER NOT NULL,
    роль            INTEGER NOT NULL,
    логин           CHAR(20 CHAR),
    пароль          CHAR(20 CHAR)
);

ALTER TABLE пользователи ADD CONSTRAINT пользователи_pk PRIMARY KEY ( id_user );

CREATE TABLE посещаемость (
    id_посещ   INTEGER NOT NULL,
    пара       INTEGER NOT NULL,
    дата       DATE,
    студент    INTEGER NOT NULL
);

ALTER TABLE посещаемость ADD CONSTRAINT "Посещаемость_PK" PRIMARY KEY ( id_посещ );

CREATE TABLE преподаватель (
    id_препод    INTEGER NOT NULL,
    физлицо      INTEGER NOT NULL,
    уч_степень   CHAR(50 CHAR)    ,
    уч_звание    CHAR(50 CHAR)

);

ALTER TABLE преподаватель ADD CONSTRAINT преподаватель_pk PRIMARY KEY ( id_препод );

CREATE TABLE приказы (
    id_приказа    INTEGER NOT NULL,
    тип_приказа   INTEGER NOT NULL,
    no_приказа    INTEGER,
    дата          DATE,
    физлицо       INTEGER NOT NULL,
    утвердил      INTEGER NOT NULL
);

ALTER TABLE приказы ADD CONSTRAINT приказы_pk PRIMARY KEY ( id_приказа );

CREATE TABLE расписание (
    id_пары         INTEGER NOT NULL,
    дисциплина      INTEGER NOT NULL,
    день_недели     INTEGER NOT NULL,
    преподаватель   INTEGER NOT NULL,
    аудитория       CHAR(5 CHAR),
    числ_знам       CHAR(1),
    группа          INTEGER NOT NULL,
    учплан          INTEGER NOT NULL,
    тип_занятия     INTEGER NOT NULL
);

ALTER TABLE расписание ADD CONSTRAINT расписание_pk PRIMARY KEY ( id_пары );

CREATE TABLE роль (
    id_роли        INTEGER NOT NULL,
    наименование   CHAR(15 CHAR)
);

ALTER TABLE роль ADD CONSTRAINT роль_pk PRIMARY KEY ( id_роли );

CREATE TABLE студент (
    id_студента      INTEGER NOT NULL,
    физлицо          INTEGER NOT NULL,
    группа           INTEGER NOT NULL,
    no_студбилета    CHAR(6 CHAR),
    no_зачетки       CHAR(6 CHAR),
    датазачисления   DATE,
    датавыпуска      DATE,
    мать             INTEGER NOT NULL,
    отец             INTEGER NOT NULL,
    общежитие        CHAR(1),
    военнаякаф       CHAR(1),
    стипендия        NUMBER,
    no_личдела       INTEGER
);

ALTER TABLE студент ADD CONSTRAINT студент_pk PRIMARY KEY ( id_студента );

CREATE TABLE типмероприятия (
    id         INTEGER NOT NULL,
    название   CHAR (50)


);

ALTER TABLE типмероприятия ADD CONSTRAINT типмеропр_pk PRIMARY KEY ( id );

CREATE TABLE типприказа (
    id    INTEGER NOT NULL,
    тип   CHAR(40)
);

ALTER TABLE типприказа ADD CONSTRAINT типприказа_pk PRIMARY KEY ( id );

CREATE TABLE типызанятий (
    id           INTEGER NOT NULL,
    типзанятия   CHAR(15 CHAR)
);

ALTER TABLE типызанятий ADD CONSTRAINT типзанятия_pk PRIMARY KEY ( id );

CREATE TABLE учебныйплан (
    id_учплана       INTEGER NOT NULL,
    приказ           INTEGER NOT NULL,
    no_семестра      INTEGER,
    экзамен          CHAR(1),
    дисциплина       INTEGER NOT NULL,
    колволекций      INTEGER,
    колволаб         INTEGER,
    колвосем         INTEGER,
    колвомодулей     INTEGER,
    курсовойпроект   CHAR(1)
);

ALTER TABLE учебныйплан ADD CONSTRAINT учебныйплан_pk PRIMARY KEY ( id_учплана );

CREATE TABLE физлица (
    id_физлица      INTEGER NOT NULL,
    фамилия         CHAR(20 CHAR),
    имя             CHAR(15 CHAR),
    отчество        CHAR(20 CHAR),
    пол             CHAR(1 CHAR),
    дата_рождения   DATE,
    телефон         CHAR(10 CHAR),
    элпочта         CHAR(25 CHAR),
    адр_регистр     CHAR(30 CHAR),
    адр_прожив      CHAR(30 CHAR),
    паспорт         CHAR(10 CHAR),
    примечание      CHAR(255 CHAR)
);

ALTER TABLE физлица ADD CONSTRAINT физлица_pk PRIMARY KEY ( id_физлица );

ALTER TABLE замдекана ADD CONSTRAINT замдекфизлицfk FOREIGN KEY ( физлицо )
    REFERENCES физлица ( id_физлица );

ALTER TABLE кпм ADD CONSTRAINT кпмтипмерfk FOREIGN KEY ( тип )
    REFERENCES типмероприятия ( id );

ALTER TABLE кпм ADD CONSTRAINT кпмучпланfk FOREIGN KEY ( учплан )
    REFERENCES учебныйплан ( id_учплана );

ALTER TABLE куратор ADD CONSTRAINT кургруппыfk FOREIGN KEY ( группа )
    REFERENCES группы ( id_группы );

ALTER TABLE куратор ADD CONSTRAINT курфизлицаfk FOREIGN KEY ( физлицо )
    REFERENCES физлица ( id_физлица );

ALTER TABLE нир ADD CONSTRAINT нир_кпм_fk FOREIGN KEY ( кпм )
    REFERENCES кпм ( id );

ALTER TABLE нир ADD CONSTRAINT нирпреподfk FOREIGN KEY ( руководитель )
    REFERENCES преподаватель ( id_препод );

ALTER TABLE нир ADD CONSTRAINT нирстудfk FOREIGN KEY ( исполнитель )
    REFERENCES студент ( id_студента );

ALTER TABLE общдеятельность ADD CONSTRAINT общдеятfk FOREIGN KEY ( группа )
    REFERENCES группы ( id_группы );


ALTER TABLE общдеятельность ADD CONSTRAINT общдеят_д_fk FOREIGN KEY ( должность )
    REFERENCES общдолжности ( id );

ALTER TABLE общдеятельность ADD CONSTRAINT общд_ст_fk FOREIGN KEY ( студент )
    REFERENCES студент ( id_студента );

ALTER TABLE оценки ADD CONSTRAINT оценкпмfk FOREIGN KEY ( кпм )
    REFERENCES кпм ( id );

ALTER TABLE оценки ADD CONSTRAINT оценпреподfk FOREIGN KEY ( преподаватель )
    REFERENCES преподаватель ( id_препод );

ALTER TABLE оценки ADD CONSTRAINT оценстудfk FOREIGN KEY ( студент )
    REFERENCES студент ( id_студента );

ALTER TABLE пользователи ADD CONSTRAINT пользрольfk FOREIGN KEY ( роль )
    REFERENCES роль ( id_роли );

ALTER TABLE пользователи ADD CONSTRAINT пользфизлицfk FOREIGN KEY ( "id _ФизЛица" )
    REFERENCES физлица ( id_физлица );

ALTER TABLE посещаемость ADD CONSTRAINT посещраспfk FOREIGN KEY ( пара )
    REFERENCES расписание ( id_пары );

ALTER TABLE посещаемость ADD CONSTRAINT посещстудfk FOREIGN KEY ( студент )
    REFERENCES студент ( id_студента );

ALTER TABLE преподаватель ADD CONSTRAINT преподфизлицfk FOREIGN KEY ( физлицо )
    REFERENCES физлица ( id_физлица );

ALTER TABLE приказы ADD CONSTRAINT приктипприкfk FOREIGN KEY ( тип_приказа )
    REFERENCES типприказа ( id );

ALTER TABLE приказы ADD CONSTRAINT прикфизлицfk FOREIGN KEY ( физлицо )
    REFERENCES физлица ( id_физлица );

ALTER TABLE приказы ADD CONSTRAINT прикфизлицfk1 FOREIGN KEY ( утвердил )
    REFERENCES физлица ( id_физлица );

ALTER TABLE расписание ADD CONSTRAINT распгрупfk FOREIGN KEY ( группа )
    REFERENCES группы ( id_группы );

ALTER TABLE расписание ADD CONSTRAINT распденьнедfk FOREIGN KEY ( день_недели )
    REFERENCES деньнедели ( id );

ALTER TABLE расписание ADD CONSTRAINT расппреподfk FOREIGN KEY ( преподаватель )
    REFERENCES преподаватель ( id_препод );

ALTER TABLE расписание ADD CONSTRAINT расптипызанfk FOREIGN KEY ( тип_занятия )
    REFERENCES типызанятий ( id );


ALTER TABLE расписание ADD CONSTRAINT распучпланfk1 FOREIGN KEY ( учплан )
    REFERENCES учебныйплан ( id_учплана );

ALTER TABLE студент ADD CONSTRAINT студгрупfk FOREIGN KEY ( группа )
    REFERENCES группы ( id_группы );

ALTER TABLE студент ADD CONSTRAINT студфизлицfk FOREIGN KEY ( физлицо )
    REFERENCES физлица ( id_физлица );

ALTER TABLE студент ADD CONSTRAINT студфизлицfk1 FOREIGN KEY ( мать )
    REFERENCES физлица ( id_физлица );

ALTER TABLE студент ADD CONSTRAINT студфизлицfk2 FOREIGN KEY ( отец )
    REFERENCES физлица ( id_физлица );

ALTER TABLE учебныйплан ADD CONSTRAINT учплдисцfk FOREIGN KEY ( дисциплина )
    REFERENCES дисциплины ( id_дисцпл );

ALTER TABLE учебныйплан ADD CONSTRAINT учплприкfk FOREIGN KEY ( приказ )
    REFERENCES приказы ( id_приказа );

CREATE SEQUENCE группы_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER группы_id_trg BEFORE
    INSERT ON группы
    FOR EACH ROW
    WHEN (
        new.id_группы IS NULL
    )
BEGIN
    :new.id_группы := группы_id_seq.nextval;
END;
/

CREATE SEQUENCE деньнедели_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER деньнедели_id_trg BEFORE
    INSERT ON деньнедели
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := деньнедели_id_seq.nextval;
END;
/

CREATE SEQUENCE дисциплины_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER дисциплины_trg BEFORE
    INSERT ON дисциплины
    FOR EACH ROW
    WHEN (
        new.id_дисцпл IS NULL
    )
BEGIN
    :new.id_дисцпл := дисциплины_seq.nextval;
END;
/

CREATE SEQUENCE id_замдекана_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER id_замдекана_trg BEFORE
    INSERT ON замдекана
    FOR EACH ROW
    WHEN (
        new.id_замдекана IS NULL
    )
BEGIN
    :new.id_замдекана := id_замдекана_seq.nextval;
END;
/

CREATE SEQUENCE кпм_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER кпм_id_trg BEFORE
    INSERT ON кпм
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := кпм_id_seq.nextval;
END;
/

CREATE SEQUENCE id_куратора_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER id_куратора_trg BEFORE
    INSERT ON куратор
    FOR EACH ROW
    WHEN (
        new.id_куратора IS NULL
    )
BEGIN
    :new.id_куратора := id_куратора_seq.nextval;
END;
/

CREATE SEQUENCE нир_id_работы_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER нир_id_работы_trg BEFORE
    INSERT ON нир
    FOR EACH ROW
    WHEN (
        new.id_работы IS NULL
    )
BEGIN
    :new.id_работы := нир_id_работы_seq.nextval;
END;
/

CREATE SEQUENCE общдеят_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER общдеят_id_trg BEFORE
    INSERT ON общдеятельность
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := общдеят_id_seq.nextval;
END;
/

CREATE SEQUENCE "Оценки_SEQ" START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER "Оценки_TRG" BEFORE
    INSERT ON оценки
    FOR EACH ROW
    WHEN (
        new."id Оценки" IS NULL
    )
BEGIN
    :new."id Оценки" := "Оценки_SEQ".nextval;
END;
/

CREATE SEQUENCE id_user_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER id_user_trg BEFORE
    INSERT ON пользователи
    FOR EACH ROW
    WHEN (
        new.id_user IS NULL
    )
BEGIN
    :new.id_user := id_user_seq.nextval;
END;
/

CREATE SEQUENCE id_посещ_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER id_посещ_trg BEFORE
    INSERT ON посещаемость
    FOR EACH ROW
    WHEN (
        new.id_посещ IS NULL
    )
BEGIN
    :new.id_посещ := id_посещ_seq.nextval;
END;
/

CREATE SEQUENCE id_препод_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER id_препод_trg BEFORE
    INSERT ON преподаватель
    FOR EACH ROW
    WHEN (
        new.id_препод IS NULL
    )
BEGIN
    :new.id_препод := id_препод_seq.nextval;
END;
/

CREATE SEQUENCE id_приказа_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER id_приказа_trg BEFORE
    INSERT ON приказы
    FOR EACH ROW
    WHEN (
        new.id_приказа IS NULL
    )
BEGIN
    :new.id_приказа := id_приказа_seq.nextval;
END;
/

CREATE SEQUENCE id_пары_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER id_пары_trg BEFORE
    INSERT ON расписание
    FOR EACH ROW
    WHEN (
        new.id_пары IS NULL
    )
BEGIN
    :new.id_пары := id_пары_seq.nextval;
END;
/

CREATE SEQUENCE роль_id_роли_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER роль_id_роли_trg BEFORE
    INSERT ON роль
    FOR EACH ROW
    WHEN (
        new.id_роли IS NULL
    )
BEGIN
    :new.id_роли := роль_id_роли_seq.nextval;
END;
/

CREATE SEQUENCE id_студента_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER id_студента_trg BEFORE
    INSERT ON студент
    FOR EACH ROW
    WHEN (
        new.id_студента IS NULL
    )
BEGIN
    :new.id_студента := id_студента_seq.nextval;
END;
/

CREATE SEQUENCE id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER id_trg BEFORE
    INSERT ON типмероприятия
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := id_seq.nextval;
END;
/

CREATE SEQUENCE типприказа_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER типприказа_id_trg BEFORE
    INSERT ON типприказа
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := типприказа_id_seq.nextval;
END;
/

CREATE SEQUENCE типызанятий_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER типызанятий_id_trg BEFORE
    INSERT ON типызанятий
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := типызанятий_id_seq.nextval;
END;
/

CREATE SEQUENCE id_учплана_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER id_учплана_trg BEFORE
    INSERT ON учебныйплан
    FOR EACH ROW
    WHEN (
        new.id_учплана IS NULL
    )
BEGIN
    :new.id_учплана := id_учплана_seq.nextval;
END;
/

CREATE SEQUENCE id_физлица_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER id_физлица_trg BEFORE
    INSERT ON физлица
    FOR EACH ROW
    WHEN (
        new.id_физлица IS NULL
    )
BEGIN
    :new.id_физлица := id_физлица_seq.nextval;
END;
/

